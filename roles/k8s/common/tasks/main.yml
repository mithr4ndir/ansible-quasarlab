- name: Ensure /etc/hosts has entries for all k8s nodes
  ansible.builtin.lineinfile:
    path: /etc/hosts
    insertafter: EOF
    line: "{{ item.ip }} {{ item.name }}"
    regexp: "^{{ item.ip }}[[:space:]]+{{ item.name }}$"
  loop:
    - { ip: "192.168.1.90", name: "k8cluster1" }
    - { ip: "192.168.1.89", name: "k8cluster2" }
    - { ip: "192.168.1.91", name: "k8cluster3" }

- name: Check if swap is active
  ansible.builtin.command: swapon --summary
  register: swap_status
  changed_when: false
  failed_when: false

- name: Turn off swap only if active
  ansible.builtin.command: swapoff -a
  when: swap_status.stdout != ""
  register: swapoff_result
  changed_when: true  # swap was active and is now off

- name: Remove swap entry from fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^\s*([^#]\S+)\s+\S+\s+swap\s+.*$'
    replace: '# \1 swap disabled by Ansible'


- name: Load Containerd kernel modules
  ansible.builtin.modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter

- name: Persist Containerd kernel modules on reboot
  ansible.builtin.copy:
    dest: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      br_netfilter
    owner: root
    group: root
    mode: '0644'

- name: Apply Kubernetes networking sysctls
  ansible.builtin.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
  loop:
    - { name: net.bridge.bridge-nf-call-iptables,   value: "1" }
    - { name: net.bridge.bridge-nf-call-ip6tables,  value: "1" }
    - { name: net.ipv4.ip_forward,                  value: "1" }
    - { name: net.ipv4.conf.all.forwarding,         value: "1" }

- name: Install chrony
  ansible.builtin.apt:
    name: chrony
    state: present
    update_cache: yes

- name: Ensure chrony is running
  ansible.builtin.service:
    name: chrony
    state: started
    enabled: yes
